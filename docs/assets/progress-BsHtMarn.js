import{k as I,r as u,j as l,n as m,x as c}from"./index-Dj3cS6za.js";var d="Progress",v=100,[E,S]=I(d),[R,j]=E(d),x=u.forwardRef((r,e)=>{const{__scopeProgress:n,value:o=null,max:a,getValueLabel:b=w,...h}=r;(a||a===0)&&!p(a)&&console.error(y(`${a}`,"Progress"));const t=p(a)?a:v;o!==null&&!f(o,t)&&console.error(_(`${o}`,"Progress"));const s=f(o,t)?o:null,$=i(s)?b(s,t):void 0;return l.jsx(R,{scope:n,value:s,max:t,children:l.jsx(m.div,{"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":i(s)?s:void 0,"aria-valuetext":$,role:"progressbar","data-state":N(s,t),"data-value":s??void 0,"data-max":t,...h,ref:e})})});x.displayName=d;var g="ProgressIndicator",P=u.forwardRef((r,e)=>{const{__scopeProgress:n,...o}=r,a=j(g,n);return l.jsx(m.div,{"data-state":N(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...o,ref:e})});P.displayName=g;function w(r,e){return`${Math.round(r/e*100)}%`}function N(r,e){return r==null?"indeterminate":r===e?"complete":"loading"}function i(r){return typeof r=="number"}function p(r){return i(r)&&!isNaN(r)&&r>0}function f(r,e){return i(r)&&!isNaN(r)&&r<=e&&r>=0}function y(r,e){return`Invalid prop \`max\` of value \`${r}\` supplied to \`${e}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${v}\`.`}function _(r,e){return`Invalid prop \`value\` of value \`${r}\` supplied to \`${e}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${v} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var M=x,V=P;const C=u.forwardRef(({className:r,value:e,indicatorClassName:n,...o},a)=>l.jsx(M,{ref:a,className:c("relative h-2 w-full overflow-hidden rounded-full bg-primary/10",r),...o,children:l.jsx(V,{className:c("h-full w-full flex-1 bg-primary transition-all",n),style:{transform:`translateX(-${100-(e||0)}%)`}})}));export{C as P};
